// This is the top node of the
?start: top_level_stmt*

top_level_stmt: region | function_def

region: "region" r_ident "<" uint ">" block

SINGLE_COMMENT: "//" /[^\n]/*
%ignore SINGLE_COMMENT

function_def: "func" f_ident "(" arg_list? ")" ("->" type)? block

function_call: f_ident "(" call_list ")"

call_list: expr ("," call_list)*

r_ident: /[a-zA-Z_][a-zA-Z0-9_]*/

f_ident: /[a-zA-Z_][a-zA-Z0-9_]*/

v_ident: /[a-zA-Z_][a-zA-Z0-9_]*/

type: /[a-zA-Z_][a-zA-Z0-9_]*/ ("?")?

string: ESCAPED_STRING

uint: /[0-9]+/

arg_list: arg ("," arg_list)*

arg: v_ident ":" type

block: "{" stmt* "}"

stmt: (function_call | return | assignment ) ";" | if | qif

assignment: type v_ident "=" ()

return: "return" expr

expr: paren | mul | div | add | sub | v_ident | string | uint

if: "if" b_expr block

b_expr: eq | neq | greater | lesser

eq: expr "==" expr

neq: expr "!=" expr

greater: expr ">" expr

lesser: expr "<" expr

paren: "(" expr ")"

mul: expr "*" expr

div: expr "/" expr

add: expr "+" expr

sub: expr "-" expr

q_expr: q_eq | q_neq

q_eq: q_var "==" q_var

q_neq: q_var "!=" q_var

q_lit: "^" qubit+ "^"

q_var: q_lit | v_ident

qif: "qif" q_expr block

qubit: "0" | "1"

%import common.WS
%import common.ESCAPED_STRING

%ignore WS